#+TITLE: Emacs Config
#+AUTHOR: Yun-L
#+LANGUAGE: en

* Setup
** Package Manager
:PROPERTIES:
:Name:     straight.el
:Prerequisites: git
:Source:   https://github.com/raxod502/straight.el
:END:
- package management bootstrap code (must be before any other packages are loaded)
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** Configuration Manager
:PROPERTIES:
:Name:     use-package
:Source:   https://github.com/jwiegley/use-package
:END:
- isolate configurations per package
- can interface with straight.el but must be installed right after straight.el
#+begin_src emacs-lisp
  (straight-use-package 'use-package)
#+end_src
- enable package statistics (must be enabled right after use-package installation)
- run cmd M-x use-package-report to see results
#+begin_src emacs-lisp
  (setq use-package-compute-statistics t)
#+end_src

** General Early Setup
- org needs to be loaded throught straight, before any packages that use org are loaded. This is to fix a bug with org agenda commands: ~Symbol's value as variable is void: org-priority-highest~
#+begin_src emacs-lisp
  (straight-use-package '(org :local-repo nil))
#+end_src

* Default Preferences
** Visual Defaults
- wrap text when lines are too long
#+begin_src emacs-lisp
  (global-visual-line-mode 1)
#+end_src
- display default emacs fringes (8 pixels on the left and right of buffers)
#+begin_src emacs-lisp
  (fringe-mode nil)
#+end_src
- use window dividers
#+begin_src emacs-lisp
  (setq window-divider-default-places t)
  (setq window-divider-default-bottom-width 1)
  (setq window-divider-default-right-width 1)
  (window-divider-mode)
#+end_src
- hide menu bar, scroll bar, tool bar, and tooltip
#+begin_src emacs-lisp
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
  (tooltip-mode 0)
#+end_src
- use pixel size for frame resizes rather than font
#+begin_src emacs-lisp
  (setq frame-resize-pixelwise t)
#+end_src
*** Fonts
:PROPERTIES:
:Source:   https://input.djr.com/info/
:Name:     Input
:END:
- 'InputMono' for default font (if found)
#+begin_src emacs-lisp
  (if (member "InputMono" (font-family-list))
      (set-frame-font "InputMono-12" nil t)
    nil)

  (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "InputSerif"))))
   '(fixed-pitch ((t ( :family "InputMono")))))
#+end_src

** Interface Defaults
- custom keybinding to quickly access configs
#+begin_src emacs-lisp
  (defun find-user-config-file ()
    (interactive)
    (if (file-exists-p "~/.emacs.d/config.org")
        (find-file "~/.emacs.d/config.org")
      (error "%s" "no config.org file found in ~/.emacs.d/")))

  (global-set-key (kbd "C-~") 'find-user-config-file)
#+end_src
- change all 'yes' or 'no' prompts to take 'y' or 'n' as input
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
- disable sounds
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src
- disable default splash screen
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src
- disable key bindings to suspend emacs
#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-x C-z"))
#+end_src

*** file backups/autosave
- creates the following directories if they don't already exist and stores backups/autosaves in them:
  - .emacs.d/backup/
  - .emacs.d/autosave/
#+begin_src emacs-lisp
  (if (file-directory-p "~/.emacs.d/backup/")
      nil
    (make-directory "~/.emacs.d/backup/"))
  (if (file-directory-p "~/.emacs.d/autosave/")
      nil
    (make-directory "~/.emacs.d/autosave/"))
  (defvar backup-dir (expand-file-name "~/.emacs.d/backup/"))
  (defvar autosave-dir (expand-file-name "~/.emacs.d/autosave/"))
  (setq backup-directory-alist (list (cons ".*" backup-dir)))
  (setq auto-save-list-file-prefix autosave-dir)
  (setq auto-save-file-name-transforms `((".*" ,autosave-dir t)))
#+end_src

* Appearance
** Enhance Status Bar
:PROPERTIES:
:Name:     powerline
:Source:   https://github.com/milkypostman/powerline
:END:
#+begin_src emacs-lisp
  (use-package smart-mode-line
    :straight t)
#+end_src

** Minimize Modeline Clutter
- Really make sure this is installed because a bunch of other packages diminish their modes
#+begin_src emacs-lisp
  (use-package diminish
    :config
    (diminish 'visual-line-mode)
    (diminish 'org-indent-mode)
    :straight t)
#+end_src

** Theme
:PROPERTIES:
:Name:     moe-theme
:Source:   https://github.com/kuanyui/moe-theme.el
:END:
#+begin_src emacs-lisp
  (use-package moe-theme
    :straight t
    :init
    ;; (setq moe-theme-mode-line-color 'magenta)
    :config
    (defun toggle-moe-dark ()
      "switch to moe-dark theme"
      (interactive)
      (moe-dark)
      (set-face-attribute 'fringe nil :background "#303030"))
    (defun toggle-moe-light ()
      "switch to moe-light theme"
      (interactive)
      (moe-light)
      (set-face-attribute 'fringe nil :background "#fdfde7")
      (set-face-extend 'org-block t nil))
    (toggle-moe-light)
    (global-set-key (kbd "C-c t d") 'toggle-moe-dark)
    (global-set-key (kbd "C-c t l") 'toggle-moe-light))
#+end_src

* Interface
** Branching Undo History
:PROPERTIES:
:Name:     undo-tree
:Source:   https://www.dr-qubit.org/undo-tree.html
:END:
- represent edit history as a tree, rather than a linear sequence of changes
#+begin_src emacs-lisp
  (use-package undo-tree
    :straight t
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode))
#+end_src

** Key Binding Guidance
:PROPERTIES:
:Name:     which-key
:Source:   https://github.com/justbur/emacs-which-key
:END:
- minor mode that display key bindings following an incomplete command
- popup serves as a reminder for forgotten key bindings or as a source of key binding discovery
#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :diminish which-key-mode
    :config
    (which-key-mode))
#+end_src

** Easier Window Switching
:PROPERTIES:
:Name:     ace-window
:Source:   https://github.com/abo-abo/ace-window
:END:
- assign keys to each open window for selection
#+begin_src emacs-lisp
  (use-package ace-window
    :straight t
    :bind ("M-o" . ace-window)
    :custom
    ;; keep same behavior even with only 2 windows open
    (aw-dispatch-always 1))
#+end_src

** Transpose Window Layout
:PROPERTIES:
:Name:     transpose-frame
:Source:   https://github.com/emacsmirror/emacswiki.org/blob/master/transpose-frame.el
:END:
- command `transpose-frame` for transposing window arrangement
- be careful not to leave treemacs sidebar open when transposing
#+begin_src emacs-lisp
  (use-package transpose-frame
    :straight t)
#+end_src

** Speedbar In The Same Frame
:PROPERTIES:
:Name:     sr-speedbar
:Source:   https://www.emacswiki.org/emacs/SrSpeedbar
:END:
- allow opening of the builtin speedbar to be in the same emacs frame
- speedbar docs: https://www.gnu.org/software/emacs/manual/html_node/speedbar/
#+begin_src emacs-lisp
  (use-package sr-speedbar
    :straight t
    :bind ([f8] . sr-speedbar-toggle)
    :custom
    (speedbar-use-images nil "disable icons")
    ;; show hidden filenames
    (speedbar-directory-unshown-regexp "^\\(CVS\\|RCS\\|SCCS\\|\\.\\.*$\\)\\'"))
#+end_src

** Modal Editing
:PROPERTIES:
:Name:     god-mode
:Source:   https://github.com/emacsorphanage/god-mode
:END:
- enter key chords without pressing the modifier keys
#+begin_src emacs-lisp
  (use-package god-mode
    :straight t
    :config
    (global-set-key (kbd "<escape>") #'god-mode-all)
    ;; change cursor shape when entering/leaving god mode
    (defun my-god-mode-update-cursor ()
      (setq cursor-type (if (or god-local-mode buffer-read-only)
                            'box
                          'bar)))
    (add-hook 'god-mode-enabled-hook #'my-god-mode-update-cursor)
    (add-hook 'god-mode-disabled-hook #'my-god-mode-update-cursor)
    :custom
    (god-exempt-major-modes nil)
    (god-exempt-predicates nil))
#+end_src

** Project File Explorer
:PROPERTIES:
:Name:     treemacs
:Source:   https://github.com/Alexander-Miller/treemacs
:END:
- tree layout file explorer
#+begin_src emacs-lisp
  (use-package treemacs
    :straight t
    :config
    ;; highlight file of current buffer
    (treemacs-follow-mode t)
    ;; automatically refresh when there are relevant changes made in the file system
    (treemacs-filewatch-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))
#+end_src
- treemacs integration with magit
#+begin_src emacs-lisp
  (use-package treemacs-magit
    :straight t
    :after (treemacs magit))
#+end_src

** Project Management
:PROPERTIES:
:Name:     projectile
:Source:   https://github.com/bbatsov/projectile
:END:
- project management utilities (jumping between files, grep in project, etc)
#+begin_src emacs-lisp
  (use-package projectile
    :straight t
    :diminish projectile-mode
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    :custom
    (projectile-completion-system 'ivy "use ivy for projectile completion backend")
    (projectile-enable-caching t))
#+end_src
- projectile integration with treemacs
#+begin_src emacs-lisp
  (use-package treemacs-projectile
    :straight t
    :after (treemacs projectile))
#+end_src

** Workspace Management
:PROPERTIES:
:Name:     persp-mode
:Source:   https://github.com/Bad-ptr/persp-mode.el
:END:
- workspace management (shared among frames)
#+begin_src emacs-lisp
  (use-package persp-mode
    :straight t
    :config
    (add-hook 'window-setup-hook #'(lambda () (persp-mode 1)))
    :after (ivy)
    :bind
    ("C-x b" . #'persp-switch-to-buffer)
    ("C-x k" . #'persp-kill-buffer)
    :custom
    (persp-keymap-prefix (kbd "C-c w"))
    (persp-autokill-buffer-on-remove 'kill-weak)

    (add-hook 'ivy-ignore-buffers
          #'(lambda (b)
          (when persp-mode
            (let ((persp (get-current-persp)))
              (if persp
              (not (persp-contain-buffer-p b persp))
            nil)))))

    (setq ivy-sort-functions-alist
      (append ivy-sort-functions-alist
          '((persp-kill-buffer   . nil)
            (persp-remove-buffer . nil)
            (persp-add-buffer    . nil)
            (persp-switch        . nil)
            (persp-window-switch . nil)
            (persp-frame-switch  . nil))))
    )
#+end_src
- projectile integration with persp-mode
#+begin_src emacs-lisp
  (use-package persp-mode-projectile-bridge
    :straight t
    :after (persp-mode projectile)
    :config
    (with-eval-after-load "persp-mode-projectile-bridge-autoloads"
      (add-hook 'persp-mode-projectile-bridge-mode-hook
                #'(lambda ()
                    (if persp-mode-projectile-bridge-mode
                        (persp-mode-projectile-bridge-find-perspectives-for-all-buffers)
                      (persp-mode-projectile-bridge-kill-perspectives))))
      (add-hook 'after-init-hook
                #'(lambda ()
                    (persp-mode-projectile-bridge-mode 1))
                t)))
#+end_src

** Ido Completion Replacement
:PROPERTIES:
:Name:     ivy
:Source:   https://github.com/abo-abo/swiper
:END:
- completion framework to replace built in ido functionality
#+begin_src emacs-lisp
  (use-package ivy
    :straight t
    :diminish ivy-mode
    :config
    (ivy-mode t)
    :custom
    (ivy-use-virtual-buffers t)
    (enable-recursive-minibuffers t)
    (ivy-count-format "[%d/%d] "))
#+end_src

*** use ivy as backend for built in emacs commands
:PROPERTIES:
:Name:     counsel
:Source:   https://github.com/abo-abo/swiper
:Prerequisites: ivy
:END:
- provides versions of common emacs commands that use ivy
#+begin_src emacs-lisp
  (use-package counsel
    :straight t
    :after (ivy))
#+end_src

*** isearch enhancement
:PROPERTIES:
:Name:     swiper
:Source:   https://github.com/abo-abo/swiper
:Prerequisites: ivy
:END:
- ivy enhanced version of isearch
#+begin_src emacs-lisp
  (use-package swiper
    :straight t
    :after (ivy)
    :bind (("C-s" . swiper-isearch)))
#+end_src

** Interactive List Sorting
:PROPERTIES:
:Name:     prescient
:Source:   https://github.com/raxod502/prescient.el
:END:
- sort and filter lists of candidates (for ivy/company listing)
#+begin_src emacs-lisp
  (use-package prescient
    :straight t)
#+end_src
- prescient integration with ivy
#+begin_src emacs-lisp
  (use-package ivy-prescient
    :straight t
    :after (prescient ivy counsel)
    :config
    (ivy-prescient-mode))
#+end_src
- prescient integration with company
#+begin_src emacs-lisp
  (use-package company-prescient
    :straight t
    :after (company prescient)
    :config
    (company-prescient-mode))
#+end_src

** Enhance Text Navigation
:PROPERTIES:
:Name:     avy
:Source:   https://github.com/abo-abo/avy
:END:
- jumping to visible text w/ char-based decision tree
#+begin_src emacs-lisp
  (use-package avy
    :straight t
    :bind
    (("C-:" . avy-goto-char)
     ("C-;" . avy-goto-char-2))
    :custom
    (avy-keys '(?a ?o ?e ?u ?i ?d ?h ?t ?n ?s) "change to dvorak home row keys"))
#+end_src

** Auto Completion
:PROPERTIES:
:Name:     Company
:Source:   http://company-mode.github.io
:END:
- inbuffer completion framework
- uses pluggable back-ends/front-ends to retrieve and display completion candidates
#+begin_src emacs-lisp
  (use-package company
    :straight t
    :diminish company-mode
    :init
    (global-company-mode))
#+end_src

* Programming & Development
** Programming Defaults
  #+begin_src emacs-lisp
    (setq-default tab-width 4)
  #+end_src
- default to using spaces instead of tabs
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src
- show column indicator, default to 80 columns
- override if a different value is needed in a specific language
#+begin_src emacs-lisp
  (unless (version< emacs-version "27.1")
    (setq-default display-fill-column-indicator-column 80)
    (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode))
#+end_src

** Language Server Protocol Support
:PROPERTIES:
:Source:   https://emacs-lsp.github.io/lsp-ui/
:Name:     lsp-mode
:END:
- client for the Language Server Protocol
- install language servers to get support for particular languages
- UI modules for lsp-mode
#+begin_src emacs-lisp
  (use-package lsp-ui
    :straight t
    :commands lsp-ui-mode
    :custom
    (lsp-ui-peek-always-show t))
#+end_src
#+begin_src emacs-lisp
    (use-package lsp-mode
      :straight t
      :init
      (setq lsp-keymap-prefix "C-c l")
      :after (which-key)
      :hook ((java-mode . lsp-deferred)
             (csharp-mode . lsp-deferred)
             (c++-mode . lsp-deferred)
             (c-mode . lsp-deferred)
             ;; which-key integration
             (lsp-mode . lsp-enable-which-key-integration))
      :commands (lsp lsp-deferred)
      :custom
      (gc-cons-threshold 100000000)
      (read-process-output-max (* 1024 1024))
      (lsp-clients-clangd-executable "~/External/clangd_12.0.0/bin/clangd"))
#+end_src
- integration with ivy
#+begin_src emacs-lisp
  (use-package lsp-ivy
    :straight t
    :after (ivy)
    :commands lsp-ivy-workspace-symbol)
#+end_src
- integration with treemacs
#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :straight t
    :after (treemacs)
    :commands lsp-treemacs-errors-list)
#+end_src

** Debug Adapter Protocol Support
:PROPERTIES:
:Name:     dap-mode
:Source:   https://github.com/emacs-lsp/dap-mode
:END:
#+begin_src emacs-lisp
  (use-package dap-mode
    :straight t
    :after lsp-mode
    :config (dap-auto-configure-mode))
#+end_src

** Code Templating System
:PROPERTIES:
:Source:   https://github.com/joaotavora/yasnippet
:Name:     yasnippet
:END:
- template system
#+begin_src emacs-lisp
  (use-package yasnippet
    :straight t
    :diminish yas-minor-mode
    :config
    (yas-global-mode 1))
#+end_src
- premade snippets
#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :straight t)
#+end_src

** Git Interface
:PROPERTIES:
:Name:     magit
:Source:   https://magit.vc/
:END:
- interface for common git features
#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :bind ("C-x g" . magit-status))
#+end_src

** Syntax Checking
:PROPERTIES:
:Name:     flycheck
:Source:   https://www.flycheck.org/en/latest/index.html
:END:
#+begin_src emacs-lisp
  (use-package flycheck
    :straight t)
#+end_src

** Fallback For Jumping To Definitions
:PROPERTIES:
:Name:     dumb-jump
:Source:   https://github.com/jacktasia/dumb-jump
:END:
- regex based jump to definition
#+begin_src emacs-lisp
  (use-package dumb-jump
    :straight t
    :config
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
    :custom
    (dumb-jump-quiet t))
#+end_src

** Python
:PROPERTIES:
:Source:   https://elpy.readthedocs.io/en/latest
:Name:     elpy
:END:
- python development environment
- uses flycheck for syntax checking backend
- external dependencies can be installed with `elpy-config`
#+begin_src emacs-lisp
  (use-package elpy
    :straight t
    :after (company flycheck)
    :defer t
    :init
    (advice-add 'python-mode :before 'elpy-enable) ;; defer loading
    :config
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode)
    (add-hook 'python-mode-hook 'hs-minor-mode)
    :custom
    (elpy-folding-fringe-indicators t "enable code folding fringe indicators")
    (elpy-modules
     '(elpy-module-company
       elpy-module-eldoc
       elpy-module-flymake
       elpy-module-folding
       elpy-module-pyvenv
       elpy-module-highlight-indentation
       elpy-module-yasnippet
       elpy-module-django
       elpy-module-sane-defaults) "activate elpy modules")
    ;; code folding compatibility
    :custom-face
    ;; code folding button styling
    (elpy-folding-fringe-face ((t (:inherit (quote font-lock-keyword-face) :box (:line-width 1 :style released-button))))))
#+end_src

** C#
*** C# Major Mode
#+begin_src emacs-lisp
  (use-package tree-sitter
    :disabled
    :straight t)
  (use-package tree-sitter-langs
    :disabled
    :straight t)

  (use-package csharp-mode
    :straight t)
    ;; :config
    ;; (add-to-list 'auto-mode-alist '("\\.cs\\'" . csharp-tree-sitter-mode)))
#+end_src

** Java
*** Java Defaults
- set column indicator at 100
#+begin_src emacs-lisp
  (unless (version< emacs-version "27.1")
    (add-hook 'java-mode-hook
              (lambda ()
                (make-local-variable 'display-fill-column-indicator-column)
                (setq display-fill-column-indicator-column 100))))
#+end_src
- customize offsets for java
#+begin_src emacs-lisp
  (add-hook 'java-mode-hook
            (lambda ()
              (c-set-offset 'arglist-intro '++)
              (c-set-offset 'arglist-close 0)))

#+end_src

*** Java LSP Server
:PROPERTIES:
:Source:   https://github.com/emacs-lsp/lsp-java
:Name:     lsp-java
:Prerequisites: lsp-mode
:END:
#+begin_src emacs-lisp
  (use-package lsp-java
    :straight t
    :after (lsp-mode)
    :config
    (add-hook 'java-mode-hook 'lsp)
    (setq lsp-java-configuration-runtimes '[(:name "JavaSE-1.8"
                                                   :path "C:/Program Files/AdoptOpenJDK/jdk-8.0.265.01-hotspot/"
                                                   :default t)])
    :custom
    (lsp-java-server-install-dir "~/.emacs.d/lsp-java-server/")
    (lsp-java-format-settings-url "~/.emacs.d/misc/eclipse-java-google-style.xml"))

  (use-package dap-java
    :ensure nil)
#+end_src

** Groovy
*** Groovy Major Mode
:PROPERTIES:
:Name:     groovy-mode
:Source:   https://github.com/Groovy-Emacs-Modes/groovy-emacs-modes
:END:
#+begin_src emacs-lisp
  (use-package groovy-mode
    :straight t)
#+end_src

** Javascript
*** JS Defaults
#+begin_src emacs-lisp
  (setq-default js-indent-level 4)
  (setq-default js-switch-indent-offset 4)
#+end_src

*** Development Environment
:PROPERTIES:
:Name:     js2-mode
:Source:   https://github.com/mooz/js2-mode
:END:
- major mode for javascript
#+begin_src emacs-lisp
  (use-package js2-mode
    :straight t
    :config
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    (add-hook 'js2-mode-hook #'js2-imenu-extras-mode))
#+end_src

** Web Templates
:PROPERTIES:
:Name:     web-mode
:Source:   https://web-mode.org
:END:
- major mode for editing web templates
#+begin_src emacs-lisp
  (use-package web-mode
    :straight t
    :config
    (add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode))
    :custom
    (web-mode-markup-indent-offset 2)
    (web-mode-css-indent-offset 2)
    (web-mode-code-indent-offset 2)
    (web-mode-enable-current-column-highlight t)
    (web-mode-enable-current-element-highlight t))
#+end_src

** LaTeX
:PROPERTIES:
:Name:     auctex
:Source:   https://www.gnu.org/software/auctex/
:END:
- support for TeX and TeX macro packages
#+begin_src emacs-lisp
  (use-package tex ;;workaround because auctex is old
    :straight auctex
    :custom
    (TeX-auto-save t)
    (TeX-parse-self t))
#+end_src

** C++

- use LSP
*** C++ Defaults
- offsets
#+begin_src emacs-lisp
  (add-hook 'c++-mode-hook
            (lambda ()
              (setq c-basic-offset 4)
              (c-set-offset 'case-label '+)))
#+end_src

** OCaml
#+begin_src emacs-lisp
  (require 'opam-user-setup "~/.emacs.d/misc/opam-user-setup.el")

  (use-package tuareg
    :straight t)

  (let ((opam-share (ignore-errors (car (process-lines "opam" "config" "var"
                                                       "share")))))
    (when (and opam-share (file-directory-p opam-share))
      ;; Register Merlin
      (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))
      (autoload 'merlin-mode "merlin" nil t nil)
      ;; Automatically start it in OCaml buffers
      (add-hook 'tuareg-mode-hook 'merlin-mode t)
      (add-hook 'caml-mode-hook 'merlin-mode t)
      ;; Use opam switch to lookup ocamlmerlin binary
      (setq merlin-command 'opam)))
#+end_src

** Lua
*** Lua
:PROPERTIES:
:Name:     lua-mode
:Source:   https://github.com/immerrr/lua-mode
:END:
- lua major mode
#+begin_src emacs-lisp
  (use-package lua-mode
    :straight t
    :custom
    (lua-indent-level 4))
#+end_src
** Markdown
:PROPERTIES:
:Name:     markdown-mode
:Source:   https://jblevins.org/projects/markdown-mode/
:END:
- markdown major mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :straight t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :custom
    (markdown-header-scaling t))
#+end_src

** Docker Compose
:PROPERTIES:
:Name:     docker-compose-mode
:Source:   https://github.com/meqif/docker-compose-mode
:END:
- docker compose major mode
#+BEGIN_SRC emacs-lisp
  (use-package docker-compose-mode
    :straight t)
#+END_SRC
* Org Mode
** Org Mode Defaults
- indent org files
#+begin_src emacs-lisp
  (setq org-startup-indented t)
#+end_src
- keep everything collapsed when first visiting an org file
#+begin_src emacs-lisp
  (setq org-startup-folded nil)
#+end_src
- hide emphasis markup (e.g **, //)
#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
#+end_src
- display proportional fonts for org mode buffers
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'variable-pitch-mode)
#+end_src
#+begin_src emacs-lisp
  (set-face-attribute 'org-document-title nil :weight 'bold :font "InputSans" :height 2.0)
  (set-face-attribute 'org-level-1 nil :weight 'bold :font "InputSans" :height 1.75)
  (set-face-attribute 'org-level-2 nil :weight 'bold :font "InputSans" :height 1.5)
  (set-face-attribute 'org-level-3 nil :weight 'bold :font "InputSans" :height 1.25)
  (set-face-attribute 'org-level-4 nil :weight 'bold :font "InputSans" :height 1.00)
  (set-face-attribute 'org-level-5 nil :weight 'bold :font "InputSans" :height 1.00)
  (set-face-attribute 'org-level-6 nil :weight 'bold :font "InputSans" :height 1.00)
  (set-face-attribute 'org-level-7 nil :weight 'bold :font "InputSans" :height 1.00)
  (set-face-attribute 'org-level-8 nil :weight 'bold :font "InputSans" :height 1.00)
  (set-face-attribute 'org-block nil :inherit 'fixed-pitch :extend t)
  (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-document-info nil :foreground "dark orange")
  (set-face-attribute 'org-document-info-keyword nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-property-value nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch :foreground "#83a598")
  (set-face-attribute 'org-formula nil :inherit 'fixed-pitch :background (face-background 'org-table))
  (set-face-attribute 'org-tag nil :inherit '(shadow fixed-pitch) :weight 'bold :height 0.8)
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-block-begin-line nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-block-end-line nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-drawer nil :inherit 'fixed-pitch)

  ;; need to do this because org-indent face may not exist yet
  (custom-theme-set-faces
   'user
   '(org-indent ((t (:inherit (org-hide fixed-pitch))))))
#+end_src

** Task Keeping
- use Dropbox to sync task files
- adds custom agenda view
- functionality only loads if all gtd files are found
- all gtd key bindings will be behind the prefix "C-c g"
#+begin_src emacs-lisp
  (setq gtd-files '("~/Dropbox/gtd/inbox.org"
                    "~/Dropbox/gtd/projects.org"
                    "~/Dropbox/gtd/reminders.org"
                    "~/Dropbox/gtd/someday.org"))

  (defun check-files-exist (list)
    "t if all files in 'list' exist"
    (eval `(and ,@(mapcar
                   (lambda (filename) (file-exists-p filename))
                   list))))


  (when (check-files-exist gtd-files)
    (defun open-gtd-projects ()
      (interactive)
      (find-file "~/Dropbox/gtd/projects.org"))
    (defun open-gtd-inbox ()
      (interactive)
      (find-file "~/Dropbox/gtd/inbox.org"))
    (defun open-gtd-reminders ()
      (interactive)
      (find-file "~/Dropbox/gtd/reminders.org"))

    (global-set-key (kbd "C-c g a") 'org-agenda)
    (global-set-key (kbd "C-c g c") 'org-capture)
    (global-set-key (kbd "C-c g p") 'open-gtd-projects)
    (global-set-key (kbd "C-c g i") 'open-gtd-inbox)
    (global-set-key (kbd "C-c g r") 'open-gtd-reminders)

    (setq org-agenda-files '("~/Dropbox/gtd/inbox.org"
                             "~/Dropbox/gtd/projects.org"
                             "~/Dropbox/gtd/reminders.org"))
    (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                   (file+headline "~/Dropbox/gtd/inbox.org" "Tasks")
                                   "* TODO %i%?")
                                  ("r" "Reminder" entry
                                   (file+headline "~/Dropbox/gtd/reminders.org" "Reminders")
                                   "* %i%? \n %U")))
    (setq org-refile-targets '(("~/Dropbox/gtd/projects.org" :maxlevel . 3)
                               ("~/Dropbox/gtd/someday.org" :level . 1)
                               ("~/Dropbox/gtd/reminders.org" :maxlevel . 2)))
    (setq org-todo-keywords '((sequence "TODO(t@)" "NEXT(n@)" "WAITING(w@)" "|"
                                        "BLOCKED(b@)" "|"
                                        "DONE(d@)" "CANCELLED(c@)" "DEFERRED(D@)")))

    (setq org-log-into-drawer t)
    (setq org-agenda-custom-commands
          '(("1" "My Agenda"
             ((agenda ""
                      ((org-agenda-span 'day)
                       (org-deadline-warning-days 365)))
              (todo "TODO"
                    ((org-agenda-overriding-header "To Refile:")
                     (org-agenda-files '("~/Dropbox/gtd/inbox.org"))))
              (todo "NEXT"
                    ((org-agenda-overriding-header "In Progress:")
                     (org-agenda-files '("~/Dropbox/gtd/projects.org"))))
              (todo "WAITING"
                    ((org-agenda-overriding-header "Waiting:")
                     (org-agenda-files '("~/Dropbox/gtd/projects.org")))))
             nil))))
#+end_src
