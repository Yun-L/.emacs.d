#+TITLE: Emacs Config
#+AUTHOR: Yun-L
#+LANGUAGE: en

* Setup
** Package Manager
:PROPERTIES:
:Name:     straight.el
:Prerequisites: git
:Source:   https://github.com/raxod502/straight.el
:END:
- package management bootstrap code (must be before any other packages are loaded)
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** Configuration Manager
:PROPERTIES:
:Name:     use-package
:Source:   https://github.com/jwiegley/use-package
:END:
- isolate configurations per package
- can interface with straight.el but must be installed right after straight.el
#+begin_src emacs-lisp
  (straight-use-package 'use-package)
#+end_src
- enable package statistics (must be enabled right after use-package installation)
- run cmd M-x use-package-report to see results
#+begin_src emacs-lisp
  (setq use-package-compute-statistics t)
#+end_src

** General Early Setup
- org needs to be loaded throught straight, before any packages that use org are loaded. This is to fix a bug with org agenda commands: ~Symbol's value as variable is void: org-priority-highest~
#+begin_src emacs-lisp
  (straight-use-package '(org :local-repo nil))
#+end_src

* Default Preferences
- remap major modes to tree sitter supported modes
#+begin_src emacs-lisp
  (add-to-list 'major-mode-remap-alist '(c-mode . c-ts-mode))
  (add-to-list 'major-mode-remap-alist '(c++-mode . c++-ts-mode))
  (add-to-list 'major-mode-remap-alist
               '(c-or-c++-mode . c-or-c++-ts-mode))
#+end_src
** Visual Defaults
- display default emacs fringes (8 pixels on the left and right of buffers)
#+begin_src emacs-lisp
  (fringe-mode nil)
#+end_src
- use window dividers
#+begin_src emacs-lisp
  (setq window-divider-default-places t)
  (setq window-divider-default-bottom-width 1)
  (setq window-divider-default-right-width 1)
  (window-divider-mode)
#+end_src
- hide menu bar, scroll bar, tool bar, and tooltip
#+begin_src emacs-lisp
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
  (tooltip-mode 0)
#+end_src
- use pixel size for frame resizes rather than font
#+begin_src emacs-lisp
  (setq frame-resize-pixelwise t)
#+end_src
- adaptive line wrap
#+begin_src emacs-lisp
  (use-package adaptive-wrap
    :straight t
    :config
    (progn
      (setq-default adaptive-wrap-extra-indent 2)
      (defun turn-on-adaptive-wrap-prefix-mode ()
        "Turns on adaptive-wrap-prefix-mode."
        (interactive)
        (adaptive-wrap-prefix-mode 1))
      (define-globalized-minor-mode global-adaptive-wrap-prefix-mode
        adaptive-wrap-prefix-mode
        turn-on-adaptive-wrap-prefix-mode)
      (global-adaptive-wrap-prefix-mode 1)))

#+end_src
- set a static window name for emacs so I can select it in wmctrl
#+begin_src emacs-lisp
  (setq-default frame-title-format '("emacs-yun"))
#+end_src
*** Fonts
:PROPERTIES:
:Source:   https://input.djr.com/info/
:Name:     Input
:END:
- 'InputMono' for default font (if found)
#+begin_src emacs-lisp
  ;; (if (member "Input Mono" (font-family-list))
  ;;     (set-frame-font "Input Mono" nil t)
  ;;   nil)

  ;; (custom-theme-set-faces
  ;;  'user
  ;;  '(variable-pitch ((t (:family "Input Serif"))))
  ;;  '(fixed-pitch ((t ( :family "Input Mono")))))

  (when
      (find-font (font-spec :name "Input Mono"))
    (set-frame-font "Input Mono-10" t t)
    (custom-theme-set-faces
     'user
     '(variable-pitch ((t (:family "Input Serif"))))
     '(fixed-pitch ((t ( :family "Input Mono")))))
    )
#+end_src

** Interface Defaults
- custom keybinding to quickly access configs
- CHECK
#+begin_src emacs-lisp
  (defun find-user-config-file ()
    (interactive)
    (if (file-exists-p "~/.emacs.d/config.org")
        (find-file "~/.emacs.d/config.org")
      (error "%s" "no config.org file found in ~/.emacs.d/")))

  (global-set-key (kbd "C-~") 'find-user-config-file)
#+end_src
- change all 'yes' or 'no' prompts to take 'y' or 'n' as input
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
- disable sounds
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src
- disable default splash screen
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src
- disable key bindings to suspend emacs
#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-x C-z"))
#+end_src

*** file backups/autosave
- creates the following directories if they don't already exist and stores backups/autosaves in them:
  - .emacs.d/backup/
  - .emacs.d/autosave/
#+begin_src emacs-lisp
  (if (file-directory-p "~/.emacs.d/backup/")
      nil
    (make-directory "~/.emacs.d/backup/"))
  (if (file-directory-p "~/.emacs.d/autosave/")
      nil
    (make-directory "~/.emacs.d/autosave/"))
  (defvar backup-dir (expand-file-name "~/.emacs.d/backup/"))
  (defvar autosave-dir (expand-file-name "~/.emacs.d/autosave/"))
  (setq backup-directory-alist (list (cons ".*" backup-dir)))
  (setq auto-save-list-file-prefix autosave-dir)
  (setq auto-save-file-name-transforms `((".*" ,autosave-dir t)))
#+end_src

* Appearance
** Enhance Status Bar
:PROPERTIES:
:Name:     powerline
:Source:   https://github.com/milkypostman/powerline
:END:
#+begin_src emacs-lisp
  (use-package smart-mode-line
    :straight t)
#+end_src

** Minimize Modeline Clutter
- Really make sure this is installed because a bunch of other packages diminish their modes
#+begin_src emacs-lisp
  (use-package diminish
    :config
    (diminish 'visual-line-mode)
    (diminish 'org-indent-mode)
    :straight t)
#+end_src

** Theme
#+begin_src emacs-lisp
  (use-package gruvbox-theme
    :straight t
    :config
    (load-theme 'gruvbox-light-soft t))
#+end_src

* Interface
** Branching Undo History
:PROPERTIES:
:Name:     undo-tree
:Source:   https://www.dr-qubit.org/undo-tree.html
:END:
- represent edit history as a tree, rather than a linear sequence of changes
#+begin_src emacs-lisp
    (use-package undo-tree
      :straight t
      :diminish undo-tree-mode
      :config
      (global-undo-tree-mode)
      (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo"))))
#+end_src

** Key Binding Guidance
:PROPERTIES:
:Name:     which-key
:Source:   https://github.com/justbur/emacs-which-key
:END:
- minor mode that display key bindings following an incomplete command
- popup serves as a reminder for forgotten key bindings or as a source of key binding discovery
#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :diminish which-key-mode
    :config
    (which-key-mode))
#+end_src

** Transpose Window Layout
:PROPERTIES:
:Name:     transpose-frame
:Source:   https://github.com/emacsmirror/emacswiki.org/blob/master/transpose-frame.el
:END:
- CHECK write myself?
- command `transpose-frame` for transposing window arrangement
- be careful not to leave treemacs sidebar open when transposing
#+begin_src emacs-lisp
  (use-package transpose-frame
    :straight t)
#+end_src

** Speedbar In The Same Frame
:PROPERTIES:
:Name:     sr-speedbar
:Source:   https://www.emacswiki.org/emacs/SrSpeedbar
:END:
- CHECK
- allow opening of the builtin speedbar to be in the same emacs frame
- speedbar docs: https://www.gnu.org/software/emacs/manual/html_node/speedbar/
#+begin_src emacs-lisp
  (use-package sr-speedbar
    :straight t
    :bind ([f8] . sr-speedbar-toggle)
    :custom
    (speedbar-use-images nil "disable icons")
    ;; show hidden filenames
    (speedbar-directory-unshown-regexp "^\\(CVS\\|RCS\\|SCCS\\|\\.\\.*$\\)\\'"))
#+end_src

** Project File Explorer
:PROPERTIES:
:Name:     treemacs
:Source:   https://github.com/Alexander-Miller/treemacs
:END:
- tree layout file explorer
- CHECK can I just use dired? more frustrating than useful
#+begin_src emacs-lisp
  (use-package treemacs
    :disabled
    :after (xah-fly-keys)
    :straight t
    :hook (treemacs-select-window . xah-fly-insert-mode-activate)
    :config
    ;; highlight file of current buffer
    (treemacs-follow-mode t)
    ;; automatically refresh when there are relevant changes made in the file system
    (treemacs-filewatch-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))
#+end_src
- treemacs integration with magit
#+begin_src emacs-lisp
  (use-package treemacs-magit
    :disabled
    :straight t
    :after (treemacs magit))
#+end_src

** Project Management
:PROPERTIES:
:Name:     projectile
:Source:   https://github.com/bbatsov/projectile
:END:
- project management utilities (jumping between files, grep in project, etc)
#+begin_src emacs-lisp
  (use-package projectile
    :straight t
    :diminish projectile-mode
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    :custom
    (projectile-completion-system 'ivy "use ivy for projectile completion backend")
    (projectile-enable-caching t))
#+end_src
- projectile integration with treemacs
#+begin_src emacs-lisp
  (use-package treemacs-projectile
    :disabled
    :straight t
    :after (treemacs projectile))
#+end_src

** Workspace Management
:PROPERTIES:
:Name:     persp-mode
:Source:   https://github.com/Bad-ptr/persp-mode.el
:END:
- workspace management (shared among frames)
#+begin_src emacs-lisp
  (use-package persp-mode
    :straight t
    :config
    (add-hook 'window-setup-hook #'(lambda () (persp-mode 1)))
    :after (ivy)
    :bind
    ("C-x b" . #'persp-switch-to-buffer)
    ("C-x k" . #'persp-kill-buffer)
    :custom
    (persp-keymap-prefix (kbd "C-c w"))
    (persp-autokill-buffer-on-remove 'kill-weak)

    (add-hook 'ivy-ignore-buffers
          #'(lambda (b)
          (when persp-mode
            (let ((persp (get-current-persp)))
              (if persp
              (not (persp-contain-buffer-p b persp))
            nil)))))

    (setq ivy-sort-functions-alist
      (append ivy-sort-functions-alist
          '((persp-kill-buffer   . nil)
            (persp-remove-buffer . nil)
            (persp-add-buffer    . nil)
            (persp-switch        . nil)
            (persp-window-switch . nil)
            (persp-frame-switch  . nil))))
    )
#+end_src
- projectile integration with persp-mode
#+begin_src emacs-lisp
  (use-package persp-mode-projectile-bridge
    :straight t
    :after (persp-mode projectile)
    :config
    (with-eval-after-load "persp-mode-projectile-bridge-autoloads"
      (add-hook 'persp-mode-projectile-bridge-mode-hook
                #'(lambda ()
                    (if persp-mode-projectile-bridge-mode
                        (persp-mode-projectile-bridge-find-perspectives-for-all-buffers)
                      (persp-mode-projectile-bridge-kill-perspectives))))
      (add-hook 'after-init-hook
                #'(lambda ()
                    (persp-mode-projectile-bridge-mode 1))
                t)))
#+end_src

** Ido Completion Replacement
:PROPERTIES:
:Name:     ivy
:Source:   https://github.com/abo-abo/swiper
:END:
- completion framework to replace built in ido functionality
#+begin_src emacs-lisp
  (use-package ivy
    :straight t
    :diminish ivy-mode
    :config
    (ivy-mode t)
    :custom
    (ivy-use-virtual-buffers t)
    (enable-recursive-minibuffers t)
    (ivy-count-format "[%d/%d] "))
#+end_src

*** use ivy as backend for built in emacs commands
:PROPERTIES:
:Name:     counsel
:Source:   https://github.com/abo-abo/swiper
:Prerequisites: ivy
:END:
- provides versions of common emacs commands that use ivy
#+begin_src emacs-lisp
  (use-package counsel
    :straight t
    :after (ivy))
#+end_src

*** isearch enhancement
:PROPERTIES:
:Name:     swiper
:Source:   https://github.com/abo-abo/swiper
:Prerequisites: ivy
:END:
- ivy enhanced version of isearch
#+begin_src emacs-lisp
  (use-package swiper
    :straight t
    :after (ivy)
    :bind (("C-s" . swiper-isearch)))
#+end_src

** Interactive List Sorting
:PROPERTIES:
:Name:     prescient
:Source:   https://github.com/raxod502/prescient.el
:END:
- sort and filter lists of candidates (for ivy/company listing)
#+begin_src emacs-lisp
  (use-package prescient
    :straight t)
#+end_src
- prescient integration with ivy
#+begin_src emacs-lisp
  (use-package ivy-prescient
    :straight t
    :after (prescient ivy counsel)
    :config
    (ivy-prescient-mode))
#+end_src
- prescient integration with company
#+begin_src emacs-lisp
  (use-package company-prescient
    :straight t
    :after (company prescient)
    :config
    (company-prescient-mode))
#+end_src

** Enhance Text Navigation
:PROPERTIES:
:Name:     avy
:Source:   https://github.com/abo-abo/avy
:END:
- jumping to visible text w/ char-based decision tree
#+begin_src emacs-lisp
  (use-package avy
    :straight t
    :bind
    (("C-:" . avy-goto-char)
     ("C-;" . avy-goto-char-2))
    :custom
    (avy-keys '(?a ?o ?e ?u ?i ?d ?h ?t ?n ?s) "change to dvorak home row keys"))
#+end_src

** Auto Completion
:PROPERTIES:
:Name:     Company
:Source:   http://company-mode.github.io
:END:
- inbuffer completion framework
- uses pluggable back-ends/front-ends to retrieve and display completion candidates
- CHECK do we need this? why not just show in minibuffer
#+begin_src emacs-lisp
  (use-package company
    :straight t
    :diminish company-mode
    :init
    (global-company-mode))
#+end_src

* Programming & Development
** Programming Defaults
- CHECK maybe auto detect which one to use
  #+begin_src emacs-lisp
    (setq-default tab-width 4)
  #+end_src
- default to using spaces instead of tabs
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src
- show column indicator, default to 80 columns
- override if a different value is needed in a specific language
#+begin_src emacs-lisp
  (unless (version< emacs-version "27.1")
    (setq-default display-fill-column-indicator-column 80)
    (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode))
#+end_src

** Tree Sitter
- Incremental parsing, replace regex based syntax highlighting and editing
- built in to emacs29
#+begin_src emacs-lisp
  ;; (use-package tree-sitter
  ;;   :straight t
  ;;   :config:
  ;;   (global-tree-sitter-mode)
  ;;   (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
  ;; (use-package tree-sitter-lang
  ;;   :straight t)
#+end_src

** Language Server Protocol Support
:PROPERTIES:
:Source:   https://github.com/joaotavora/eglot
:Name:     eglot
:END:
- client for the Language Server Protocol
- install language servers to get support for particular languages
- build in to emacs29
#+begin_src emacs-lisp
  (use-package eglot
    ;; :straight t
    :config
    (add-to-list 'eglot-server-programs '(c++-ts-mode . ("localhost" 50505)))
    ;; (add-to-list 'eglot-server-programs '(python-mode . ("localhost" 50505)))
    ;; (add-to-list 'eglot-server-programs '(js-mode . ("localhost" 50505)))
    (global-set-key (kbd "M-.") 'xref-find-definitions)
    (global-set-key (kbd "M-,") 'xref-go-back)
    (global-set-key (kbd "M-p") 'xref-find-references))
#+end_src

** Code Templating System
:PROPERTIES:
:Source:   https://github.com/joaotavora/yasnippet
:Name:     yasnippet
:END:
- template system
- CHECK think of some more use cases for this, what can be replaced with this
#+begin_src emacs-lisp
  (use-package yasnippet
    :straight t
    :diminish yas-minor-mode
    :config
    (yas-global-mode 1))
#+end_src
- premade snippets
#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :straight t)
#+end_src

** Git Interface
:PROPERTIES:
:Name:     magit
:Source:   https://magit.vc/
:END:
- interface for common git features
- CHECK take a look at possible config values
#+begin_src emacs-lisp
  (use-package magit
    :after (xah-fly-keys)
    :hook (magit-popup-mode . xah-fly-insert-mode-activate)
    :straight t
    :bind
    ("C-x g" . magit-status)
    (:map magit-file-section-map
          ("RET" . magit-diff-visit-file-other-window)
          :map magit-hunk-section-map
          ("RET" . magit-diff-visit-file-other-window)))
#+end_src

** Fallback For Jumping To Definitions
:PROPERTIES:
:Name:     dumb-jump
:Source:   https://github.com/jacktasia/dumb-jump
:END:
- regex based jump to definition
- CHECK do i even use this?
#+begin_src emacs-lisp
  (use-package dumb-jump
    :straight t
    :disabled
    :config
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
    :custom
    (dumb-jump-quiet t))
#+end_src

** Python

** C#
- CHECK can probably remove this
*** C# Major Mode
- built into emacs 29
#+begin_src emacs-lisp
  ;; (use-package csharp-mode
  ;;   :straight t)
    ;; :config
    ;; (add-to-list 'auto-mode-alist '("\\.cs\\'" . csharp-tree-sitter-mode)))
#+end_src

** Java
- CHECK can probably remove this too
*** Java Defaults
- set column indicator at 100
#+begin_src emacs-lisp
  (unless (version< emacs-version "27.1")
    (add-hook 'java-mode-hook
              (lambda ()
                (make-local-variable 'display-fill-column-indicator-column)
                (setq display-fill-column-indicator-column 100))))
#+end_src
- customize offsets for java
#+begin_src emacs-lisp
  (add-hook 'java-mode-hook
            (lambda ()
              (c-set-offset 'arglist-intro '++)
              (c-set-offset 'arglist-close 0)))

#+end_src

*** Java LSP Server
# :PROPERTIES:
# :Source:   https://github.com/emacs-lsp/lsp-java
# :Name:     lsp-java
# :Prerequisites: lsp-mode
# :END:
# #+begin_src emacs-lisp
#   (use-package lsp-java
#     :straight t
#     :after (lsp-mode)
#     :config
#     (add-hook 'java-mode-hook 'lsp)
#     (setq lsp-java-configuration-runtimes '[(:name "JavaSE-1.8"
#                                                    :path "C:/Program Files/AdoptOpenJDK/jdk-8.0.265.01-hotspot/"
#                                                    :default t)])
#     :custom
#     (lsp-java-server-install-dir "~/.emacs.d/lsp-java-server/")
#     (lsp-java-format-settings-url "~/.emacs.d/misc/eclipse-java-google-style.xml"))
# #+end_src

** Javascript
- CHECK see lsp mode, or something less buggy

** Typescript
- CHECK try lsp version
:PROPERTIES:
:Name:     typescript-mode
:Source:   https://github.com/emacs-typescript/typescript.el
:END:
major mode for typescript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :straight t)
#+end_src

** Web Templates
:PROPERTIES:
:Name:     web-mode
:Source:   https://web-mode.org
:END:
- major mode for editing web templates
- CHECK revise configs
#+begin_src emacs-lisp
  (use-package web-mode
    :straight t
    :config
    (add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode))
    :custom
    (web-mode-markup-indent-offset 2)
    (web-mode-css-indent-offset 2)
    (web-mode-code-indent-offset 2)
    (web-mode-enable-current-column-highlight t)
    (web-mode-enable-current-element-highlight t))
#+end_src

** LaTeX
:PROPERTIES:
:Name:     auctex
:Source:   https://www.gnu.org/software/auctex/
:END:
- support for TeX and TeX macro packages
- CHECK fix LaTeX stuff
#+begin_src emacs-lisp
  (use-package tex ;;workaround because auctex is old
    :straight auctex
    :custom
    (TeX-auto-save t)
    (TeX-parse-self t))
#+end_src

** C++
- CHECK use eglot, add some helpers for creating compile_commands.json, 
*** C++ Defaults
- offsets
#+begin_src emacs-lisp
  (add-hook 'c++-mode-hook
            (lambda ()
              (setq c-basic-offset 4)
              (c-set-offset 'case-label '+)))
#+end_src

** Lua
- CHECK not using this, but check out minecraft computer craft
*** Lua
:PROPERTIES:
:Name:     lua-mode
:Source:   https://github.com/immerrr/lua-mode
:END:
- lua major mode
#+begin_src emacs-lisp
  (use-package lua-mode
    :straight t
    :custom
    (lua-indent-level 4))
#+end_src
** Markdown
- CHECK useful, just review configs
:PROPERTIES:
:Name:     markdown-mode
:Source:   https://jblevins.org/projects/markdown-mode/
:END:
- markdown major mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :straight t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :custom
    (markdown-header-scaling t))
#+end_src

** Docker Compose
- CHECK useful i guess
:PROPERTIES:
:Name:     docker-compose-mode
:Source:   https://github.com/meqif/docker-compose-mode
:END:
- docker compose major mode
#+BEGIN_SRC emacs-lisp
  (use-package docker-compose-mode
    :straight t)
#+END_SRC

** CMake
- CHECK Useful i guess
:PROPERTIES:
:Name:     cmake-mode
:Source:   https://github.com/Kitware/CMake/tree/master/Auxiliary
:END:
- CMake major mode
#+begin_src emacs-lisp
  (use-package cmake-mode
    :straight t)
#+end_src
* Org Mode
- CHECK see if theres better way to set faces, review configs for more useful toggles 
** Org Mode Defaults
- indent org files
#+begin_src emacs-lisp
  (setq org-startup-indented t)
#+end_src
- keep everything collapsed when first visiting an org file
#+begin_src emacs-lisp
  (setq org-startup-folded nil)
#+end_src
- hide emphasis markup (e.g **, //)
#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
#+end_src
- display proportional fonts for org mode buffers
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'variable-pitch-mode)
#+end_src
#+begin_src emacs-lisp
  (set-face-attribute 'org-document-title nil :weight 'bold :font "InputSans" :height 2.0)
  (set-face-attribute 'org-level-1 nil :weight 'bold :font "InputSans" :height 1.75)
  (set-face-attribute 'org-level-2 nil :weight 'bold :font "InputSans" :height 1.5)
  (set-face-attribute 'org-level-3 nil :weight 'bold :font "InputSans" :height 1.25)
  (set-face-attribute 'org-level-4 nil :weight 'bold :font "InputSans" :height 1.00)
  (set-face-attribute 'org-level-5 nil :weight 'bold :font "InputSans" :height 1.00)
  (set-face-attribute 'org-level-6 nil :weight 'bold :font "InputSans" :height 1.00)
  (set-face-attribute 'org-level-7 nil :weight 'bold :font "InputSans" :height 1.00)
  (set-face-attribute 'org-level-8 nil :weight 'bold :font "InputSans" :height 1.00)
  (set-face-attribute 'org-block nil :inherit 'fixed-pitch :extend t)
  (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-document-info nil :foreground "dark orange")
  (set-face-attribute 'org-document-info-keyword nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-property-value nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch :foreground "#83a598")
  (set-face-attribute 'org-formula nil :inherit 'fixed-pitch :background (face-background 'org-table))
  (set-face-attribute 'org-tag nil :inherit '(shadow fixed-pitch) :weight 'bold :height 0.8)
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-block-begin-line nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-block-end-line nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-drawer nil :inherit 'fixed-pitch)

  ;; need to do this because org-indent face may not exist yet
  (custom-theme-set-faces
   'user
   '(org-indent ((t (:inherit (org-hide fixed-pitch))))))
#+end_src

** Task Keeping
- use Dropbox to sync task files
- adds custom agenda view
- functionality only loads if all gtd files are found
- all gtd key bindings will be behind the prefix "C-c g"
- CHECK this is mostly working, maybe review key binds and code in general
#+begin_src emacs-lisp
  (setq gtd-files '("~/Dropbox/gtd/inbox.org"
                    "~/Dropbox/gtd/projects.org"
                    "~/Dropbox/gtd/reminders.org"
                    "~/Dropbox/gtd/someday.org"))

  (defun check-files-exist (list)
    "t if all files in 'list' exist"
    (eval `(and ,@(mapcar
                   (lambda (filename) (file-exists-p filename))
                   list))))


  (when (check-files-exist gtd-files)
    (defun open-gtd-projects ()
      (interactive)
      (find-file "~/Dropbox/gtd/projects.org"))
    (defun open-gtd-inbox ()
      (interactive)
      (find-file "~/Dropbox/gtd/inbox.org"))
    (defun open-gtd-reminders ()
      (interactive)
      (find-file "~/Dropbox/gtd/reminders.org"))

    (global-set-key (kbd "C-c g a") 'org-agenda)
    (global-set-key (kbd "C-c g c") 'org-capture)
    (global-set-key (kbd "C-c g p") 'open-gtd-projects)
    (global-set-key (kbd "C-c g i") 'open-gtd-inbox)
    (global-set-key (kbd "C-c g r") 'open-gtd-reminders)

    (setq org-agenda-files '("~/Dropbox/gtd/inbox.org"
                             "~/Dropbox/gtd/projects.org"
                             "~/Dropbox/gtd/reminders.org"))
    (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                   (file+headline "~/Dropbox/gtd/inbox.org" "Tasks")
                                   "* TODO %i%?")
                                  ("r" "Reminder" entry
                                   (file+headline "~/Dropbox/gtd/reminders.org" "Reminders")
                                   "* %i%? \n %U")))
    (setq org-refile-targets '(("~/Dropbox/gtd/projects.org" :maxlevel . 3)
                               ("~/Dropbox/gtd/someday.org" :level . 1)
                               ("~/Dropbox/gtd/reminders.org" :maxlevel . 2)))
    (setq org-todo-keywords '((sequence "TODO(t@)" "NEXT(n@)" "WAITING(w@)" "|"
                                        "BLOCKED(b@)" "|"
                                        "DONE(d@)" "CANCELLED(c@)" "DEFERRED(D@)")))
    (setq org-log-into-drawer t)
    ;; show due date prewarning only after the scheduled date of a task
    (setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
    (setq org-agenda-skip-scheduled-if-deadline-is-shown t)

    (setq org-agenda-custom-commands
          '(("1" "My Agenda"
             ((agenda ""
                      ((org-agenda-span 'day)
                       (org-deadline-warning-days 365)))
              (todo "TODO"
                    ((org-agenda-overriding-header "To Refile:")
                     (org-agenda-files '("~/Dropbox/gtd/inbox.org"))))
              (todo "NEXT"
                    ((org-agenda-overriding-header "In Progress:")
                     (org-agenda-files '("~/Dropbox/gtd/projects.todo"))))
              (org "WAITING"
                    ((org-agenda-overriding-header "Waiting:")
                     (org-agenda-files '("~/Dropbox/gtd/projects.org")))))
             nil))))
#+end_src

** temp
#+begin_src emacs-lisp
  (use-package uml-mode
    :straight t)
#+end_src
- testing out highlighting
- CHECK doesnt really work, but check again
#+begin_src emacs-lisp
  (use-package highlight
    :straight t)
#+end_src

- CHECK dont really use this
#+begin_src emacs-lisp
  (use-package docker
    :straight t
    :bind ("C-c d" . docker))
#+end_src

- CHECK whats the point of this
#+begin_src emacs-lisp
  (use-package lsp-docker
    :straight t)
#+end_src

- CHECK i don't use this either
#+begin_src emacs-lisp
  (use-package hyperbole
    :disabled
    :straight t)
#+end_src

- CHECK useful, but i don't use most of it. Maybe build my own key engine. Annoying that every buffer starts in command mode
#+begin_src emacs-lisp
  (use-package xah-fly-keys
    ;; :commands xah-fly-insert-mode-activate
    :straight t
    :init
    (setq xah-fly-use-control-key nil)
    (setq xah-fly-use-meta-key nil)
    :config
    (global-set-key (kbd "<escape>") 'xah-fly-command-mode-activate)
    (xah-fly-keys-set-layout "dvorak")
    (xah-fly-keys 1))
#+end_src
#+begin_src emacs-lisp
  ;; (straight-use-package
  ;;  '(nano-emacs :type git :host github :repo "rougier/nano-emacs")
  ;;  :disabled
  ;;  :config
  ;;  (require 'nano))
#+end_src
- CHECK used at work, maybe wrap with toggle or something so its not auto executed on save
#+begin_src emacs-lisp
  (use-package prettier
    :straight t)
#+end_src
- CHECK this seems useful, but haven't built habit of using it. Review to make it easier to use
#+begin_src emacs-lisp
  (use-package atomic-chrome
    :straight t)
#+end_src
- CHECK useful as a fallback, try configuring as last resort functionality
#+begin_src emacs-lisp
  (use-package counsel-etags
    :straight t)
    ;; :config
    ;; (global-set-key (kbd "M-.") 'counsel-etags-find-tag-at-point)
    ;; (global-set-key (kbd "M-,") 'pop-tag-mark))
#+end_src


** docker-tramp
- CHECK not sure if I actually use this
- has alternative in emacs 29
#+begin_src emacs-lisp
  ;; (use-package docker-tramp
  ;;   :straight t)
#+end_src

* Easier Window Switching
:PROPERTIES:
:Name:     ace-window
:Source:   https://github.com/abo-abo/ace-window
:END:
- CHECK very useful, some stuff doesnt work though, look into it
#+begin_src emacs-lisp
  (use-package ace-window
    :straight t
    :bind ("M-o" . ace-window)
    :custom
    ;; keep same behavior even with only 2 windows open
    (aw-dispatch-always 1))
#+end_src


* Notes for new config
** Guidelines
- lower dependencies and complexity as much as possible
- prefer manual installation of packages
- consider self made solutions over installing large packages just to use a small piece of functionality
- continue using use-package, and org-babel
  - organize config by functionality, rather than by package (but still compile down to modular configs for easy debugging)
** Organization
- Initial, early setup
- Package inclusion (group by functionality)
- Variables
- Keybindings
** Packages
- use-package
- tree-sitter
- eglot
- org
- adaptive-wrap
- InputMono font
- smart-mode-line
- diminish
- gruvbox-theme
- undo-tree
- which-key
- transpose-frame
- sr-speedbar
- treemacs
- treemacs-magit
- projectile
- treemacs-projectile
- persp-mode
- persp-mode-projectile-bridge
- ivy
- counsel
- swiper
- prescient
- ivy-prescient
- company-prescient
- avy
- company
- yasnippet
- yasnippet-snippets?
- magit
- dump-jump
- csharp?
- java?
- typescript?
- web-mode
- latex/tex?
- cpp/c
- lua?
- markdown?
- docker-compose?
- cmake?
- uml?
- highlight?
- docker?
- lsp-docker?
- hyperbole?
- xah-fly-keys
- prettier
- atomic-chrome
- counsel-etags?
- ace-window
** Custom commands
- shortcut to emacs config
- gtd stuff
